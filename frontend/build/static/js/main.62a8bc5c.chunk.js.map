{"version":3,"sources":["components/Auth/AuthButtons.js","components/Auth/Login.js","App.js","reportWebVitals.js","index.js"],"names":["AuthButtons","_ref","onLoginSuccess","error","setError","useState","_jsxs","className","children","_jsx","GoogleLogin","onSuccess","async","console","log","credentialResponse","res","fetch","method","headers","body","JSON","stringify","token","credential","status","contentType","get","ok","includes","errorData","json","Error","text","data","user","message","onError","handleGoogleError","useOneTap","theme","size","shape","FacebookLogin","appId","process","autoLoad","fields","callback","response","accessToken","cssClass","icon","Login","App","isAuthenticated","setIsAuthenticated","localStorage","getItem","GOOGLE_CLIENT_ID","fromEnv","hardcoded","GoogleOAuthProvider","clientId","Router","Routes","Route","path","element","Navigate","to","replace","handleLoginSuccess","userData","setItem","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","NODE_ENV","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.62a8bc5c.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { GoogleLogin } from '@react-oauth/google';\r\nimport FacebookLogin from 'react-facebook-login';\r\nimport './AuthButtons.css';\r\n\r\nconst AuthButtons = ({ onLoginSuccess }) => {\r\n  const [error, setError] = useState(null);\r\n\r\n  const handleGoogleSuccess = async (credentialResponse) => {\r\n    try {\r\n      console.log('Credential Response:', credentialResponse); // Debug log\r\n      \r\n      const res = await fetch('http://localhost:5000/api/auth/google', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Accept': 'application/json'\r\n        },\r\n        body: JSON.stringify({ \r\n          token: credentialResponse.credential \r\n        }),\r\n      });\r\n      \r\n      // Debug logs\r\n      console.log('Response status:', res.status);\r\n      const contentType = res.headers.get('content-type');\r\n      console.log('Content type:', contentType);\r\n      \r\n      if (!res.ok) {\r\n        if (contentType && contentType.includes('application/json')) {\r\n          const errorData = await res.json();\r\n          throw new Error(errorData.error || 'Failed to authenticate');\r\n        } else {\r\n          const text = await res.text();\r\n          console.error('Non-JSON response:', text);\r\n          throw new Error('Server returned non-JSON response');\r\n        }\r\n      }\r\n      \r\n      const data = await res.json();\r\n      console.log('Response data:', data); // Debug log\r\n      \r\n      if (data.error) {\r\n        setError(data.error);\r\n        return;\r\n      }\r\n      \r\n      onLoginSuccess(data.token, data.user);\r\n    } catch (error) {\r\n      setError('Failed to login with Google: ' + error.message);\r\n      console.error('Google login error:', error);\r\n    }\r\n  };\r\n\r\n  const handleGoogleError = () => {\r\n    setError('Google login failed. Please try again.');\r\n  };\r\n\r\n  const handleFacebookResponse = async (response) => {\r\n    try {\r\n      const res = await fetch('http://localhost:5000/api/auth/facebook', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ token: response.accessToken }),\r\n      });\r\n      \r\n      if (!res.ok) {\r\n        const errorData = await res.json();\r\n        throw new Error(errorData.error || 'Failed to authenticate');\r\n      }\r\n      \r\n      const data = await res.json();\r\n      \r\n      if (data.error) {\r\n        setError(data.error);\r\n        return;\r\n      }\r\n      \r\n      onLoginSuccess(data.token, data.user);\r\n    } catch (error) {\r\n      setError('Failed to login with Facebook: ' + error.message);\r\n      console.error('Facebook login error:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"auth-buttons\">\r\n      {error && <div className=\"auth-error\">{error}</div>}\r\n      \r\n      <GoogleLogin\r\n        onSuccess={handleGoogleSuccess}\r\n        onError={handleGoogleError}\r\n        useOneTap\r\n        theme=\"filled_blue\"\r\n        size=\"large\"\r\n        text=\"signin_with\"\r\n        shape=\"rectangular\"\r\n      />\r\n      \r\n      <FacebookLogin\r\n        appId={process.env.REACT_APP_FACEBOOK_APP_ID}\r\n        autoLoad={false}\r\n        fields=\"name,email,picture\"\r\n        callback={handleFacebookResponse}\r\n        cssClass=\"facebook-login-button\"\r\n        icon=\"fa-facebook\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthButtons; ","import React from 'react';\r\nimport AuthButtons from './AuthButtons';\r\nimport './Login.css';\r\n\r\nconst Login = () => {\r\n  return (\r\n    <div className=\"login-container\">\r\n      <div className=\"login-box\">\r\n        <h1>Welcome to Ads Search Engine</h1>\r\n        <p>Please sign in to continue</p>\r\n        <AuthButtons />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login; ","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Route, Routes, Navigate } from 'react-router-dom';\nimport { GoogleOAuthProvider } from '@react-oauth/google';\nimport Login from './components/Auth/Login';\nimport './App.css';\n\nfunction App() {\n  const [isAuthenticated, setIsAuthenticated] = useState(\n    !!localStorage.getItem('token')\n  );\n\n  const handleLoginSuccess = (token, userData) => {\n    localStorage.setItem('token', token);\n    localStorage.setItem('user', JSON.stringify(userData));\n    setIsAuthenticated(true);\n  };\n\n  // Hardcode the client ID temporarily for testing\n  const GOOGLE_CLIENT_ID = \"253595159397-0uui61960q5gvv0lc66jmetv2gbsrqja.apps.googleusercontent.com\";\n  \n  console.log('Environment Variables in App:', {\n    fromEnv: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n    hardcoded: GOOGLE_CLIENT_ID\n  });\n\n  return (\n    <GoogleOAuthProvider clientId={GOOGLE_CLIENT_ID}>\n      <Router>\n        <div className=\"App\">\n          <Routes>\n            <Route \n              path=\"/login\" \n              element={\n                !isAuthenticated ? (\n                  <Login onLoginSuccess={handleLoginSuccess} />\n                ) : (\n                  <Navigate to=\"/dashboard\" replace />\n                )\n              } \n            />\n            <Route\n              path=\"/dashboard\"\n              element={\n                isAuthenticated ? (\n                  <div>Dashboard (Coming Soon)</div>\n                ) : (\n                  <Navigate to=\"/login\" replace />\n                )\n              }\n            />\n            <Route\n              path=\"/\"\n              element={<Navigate to={isAuthenticated ? \"/dashboard\" : \"/login\"} replace />}\n            />\n          </Routes>\n        </div>\n      </Router>\n    </GoogleOAuthProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Add this to debug environment variables\nconsole.log('Environment Variables:', {\n  GOOGLE_CLIENT_ID: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n  NODE_ENV: process.env.NODE_ENV\n});\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}